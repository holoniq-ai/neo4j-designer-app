/*
@name designer.action.auto.node.createRelationshipWithNode

@mode read
@input view, NODE
@input node, NODE

@output name, STRING
@output group, STRING
@output icon, STRING
@output params, LIST OF MAP
@output implicitParams, LIST OF STRING
@output hidden, BOOLEAN
*/

WITH $view AS view,
      custom.util.graphObjectType($node) AS nodeType

CALL {
      WITH view, nodeType
      MATCH (view)-[:HAS_FUNCTIONALITY]->(:Functionality)-[:AUTOGENERATED_FROM]->
      (metagraph:Metagraph)-[:DEFINES]->(:NodeDef {name: nodeType})<-[:REL_SOURCE]-(relDef:RelDef)-[:REL_TARGET]->(targetNodeDef:NodeDef)
            WHERE (targetNodeDef)<-[:DEFINES]-(:Metagraph)<-[:AUTOGENERATED_FROM]-(:Functionality)<-[:HAS_FUNCTIONALITY]-(view)
            AND NOT nodeType = "*"

      RETURN metagraph, relDef, targetNodeDef

      UNION

      WITH view, nodeType
      MATCH (view)-[:HAS_FUNCTIONALITY]->(:Functionality)-[:AUTOGENERATED_FROM]->
      (metagraph:Metagraph)-[:DEFINES]->(:NodeDef {name: nodeType})<-[:REL_SOURCE]-(relDef:RelDef)-[:REL_TARGET]->(abstractNodeDef:AbstractNodeDef)<-[:SUBCLASS_OF*1..]-(targetNodeDef:NodeDef)
            WHERE (abstractNodeDef)<-[:DEFINES]-(:Metagraph)<-[:AUTOGENERATED_FROM]-(:Functionality)<-[:HAS_FUNCTIONALITY]-(view)
            AND NOT nodeType = "*"

      RETURN metagraph, relDef, targetNodeDef

      UNION

      WITH view, nodeType
      MATCH (view)-[:HAS_FUNCTIONALITY]->(:Functionality)-[:AUTOGENERATED_FROM]->
      (metagraph:Metagraph)-[:DEFINES]->(:NodeDef {name: nodeType})-[:SUBCLASS_OF*1..]->(abstractNodeDef:AbstractNodeDef)<-[:REL_SOURCE]-(relDef:RelDef)-[:REL_TARGET]->(targetNodeDef:NodeDef)
            WHERE (abstractNodeDef)<-[:DEFINES]-(:Metagraph)<-[:AUTOGENERATED_FROM]-(:Functionality)<-[:HAS_FUNCTIONALITY]-(view)
            AND NOT nodeType = "*"

      RETURN metagraph, relDef, targetNodeDef

      UNION

      WITH view, nodeType
      MATCH (view)-[:HAS_FUNCTIONALITY]->(:Functionality)-[:AUTOGENERATED_FROM]->
      (metagraph:Metagraph)-[:DEFINES]->(:NodeDef {name: nodeType})-[:SUBCLASS_OF*1..]->(:AbstractNodeDef)<-[:REL_SOURCE]-(relDef:RelDef)
      MATCH (relDef)-[:REL_TARGET]->(:AbstractNodeDef)<-[:SUBCLASS_OF*1..]-(targetNodeDef:NodeDef)
      WHERE (targetNodeDef)<-[:DEFINES]-(:Metagraph)<-[:AUTOGENERATED_FROM]-(:Functionality)<-[:HAS_FUNCTIONALITY]-(view)
      AND NOT nodeType = "*"

      RETURN metagraph, relDef, targetNodeDef
}

WITH metagraph, relDef, targetNodeDef
WHERE NOT relDef.name = "DISPLAY_NODE"

CALL {
        WITH targetNodeDef
        CALL custom.util.getNodeDefTypesAndProps(targetNodeDef) YIELD type, prop
        CALL custom.designer.view.getWidgetForProperty(type.name, prop) YIELD widgetType, initValues
        RETURN collect({name: prop.name + " (on node)", widget: widgetType, initValues: initValues}) AS paramsNode
}

CALL {
        WITH relDef
        CALL custom.util.getRelDefTypesAndProps(relDef) YIELD type, prop
        CALL custom.designer.view.getWidgetForProperty(type.name, prop) YIELD widgetType, initValues
        RETURN collect({name: prop.name + " (on rel)", widget: widgetType, initValues: initValues}) AS paramsRel
}

RETURN 'Create: ' + relDef.name + '->' + targetNodeDef.name AS name,
       'Auto create (' + metagraph.name + ')' AS group,
       'arrow-circle-right' AS icon,
       paramsNode + paramsRel AS params,
       [relDef.uuid, targetNodeDef.uuid] AS implicitParams,
       false AS hidden;


/*
@name designer.action.auto.node.createRelationshipWithNode_do

@mode write

@input contextUuid, STRING
@input viewUuid, STRING
@input params, MAP
@input implicitParams, LIST OF STRING

@output strategy, STRING
@output message, STRING
@output statusCode, INTEGER
@output result, MAP
*/

WITH $contextUuid AS contextUuid,
     $implicitParams[0] AS relDefUuid,
     $implicitParams[1] AS targetNodeDefUuid

MATCH (contextNode:_Identifiable {uuid: contextUuid})
MATCH (relDef:RelDef {uuid: relDefUuid})
MATCH (nodeDef:NodeDef {uuid: targetNodeDefUuid})

CALL {
        WITH nodeDef
        CALL custom.util.getNodeDefTypesAndProps(nodeDef) YIELD type, prop
        WITH prop, $params[prop.name + " (on node)"] AS propertyValue
        CALL custom.designer.view.convertPropertyValue(prop.type, propertyValue) YIELD propertyValueConverted
        WITH collect([prop.name, propertyValueConverted]) + [["uuid", randomUUID()]] AS keyVals
        RETURN apoc.map.fromPairs(keyVals) AS propsNode
}
CALL apoc.create.node([nodeDef.name, "_Identifiable"], propsNode) YIELD node
CALL custom.designer.action.auto.connectNodeToAnyOrIdentifiable(node) YIELD modifiedPaths

CALL {
        WITH relDef
        CALL custom.util.getRelDefTypesAndProps(relDef) YIELD type, prop
        WITH prop, $params[prop.name + " (on rel)"] AS propertyValue
        CALL custom.designer.view.convertPropertyValue(prop.type, propertyValue) YIELD propertyValueConverted
        WITH collect([prop.name, propertyValueConverted]) + [["uuid", randomUUID()]] AS keyVals
        RETURN apoc.map.fromPairs(keyVals) AS propsRel
}
CALL apoc.create.relationship(contextNode, relDef.name, propsRel, node) YIELD rel

RETURN 0 AS statusCode,
       '' AS message,
       {createdNode: node, createdRelationship: rel} AS result,
       'APPEND' AS strategy;
