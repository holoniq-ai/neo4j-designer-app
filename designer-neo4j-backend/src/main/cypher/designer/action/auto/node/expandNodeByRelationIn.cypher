/*
@name designer.action.auto.node.expandNodeByRelationIn

@mode read
@input view, NODE
@input node, NODE

@output name, STRING
@output group, STRING
@output icon, STRING
@output params, LIST OF MAP
@output implicitParams, LIST OF STRING
@output hidden, BOOLEAN
*/


WITH $view AS view,
     custom.util.graphObjectType($node) AS nodeType

MATCH (view)-[:HAS_FUNCTIONALITY]->(:Functionality)-[:AUTOGENERATED_FROM]->(metagraph:Metagraph)-[:DEFINES]->(nodeDef:NodeDef {name: nodeType})
MATCH (nodeDef)<-[:REL_TARGET]-(relDef:RelDef)
WITH relDef, nodeDef
RETURN relDef.name + " <<" AS name,
       'Traverse' AS group,
       '' AS icon,
       [] AS params,
       [relDef.name] AS implicitParams,
       false AS hidden;

/*
@name designer.action.auto.node.expandNodeByRelationIn_do

@mode write

@input contextUuid, STRING
@input viewUuid, STRING
@input params, MAP
@input implicitParams, LIST OF STRING

@output strategy, STRING
@output message, STRING
@output statusCode, INTEGER
@output result, MAP
*/

WITH $contextUuid AS contextUuid,
     $implicitParams[0] AS relationPattern

MATCH (node:_Identifiable {uuid: contextUuid})
OPTIONAL MATCH (node)<-[rel]-(neighbour)
  WHERE type(rel) = relationPattern

RETURN {neighbourNode: neighbour,
        outgoingRelationship: rel} AS result,
       0 AS statusCode,
       '' AS message,
       'APPEND' AS strategy;
