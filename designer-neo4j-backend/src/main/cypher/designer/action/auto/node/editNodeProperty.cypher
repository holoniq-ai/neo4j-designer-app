/*
@name designer.action.auto.node.editNodeProperty

@mode read
@input view, NODE
@input node, NODE

@output name, STRING
@output group, STRING
@output icon, STRING
@output params, LIST OF MAP
@output implicitParams, LIST OF STRING
@output hidden, BOOLEAN
*/

WITH $view AS view,
     custom.util.graphObjectType($node) AS nodeType
     
MATCH (view)-[:HAS_FUNCTIONALITY]->(:Functionality)-[:AUTOGENERATED_FROM]->(metagraph:Metagraph)-[:DEFINES]->(nodeDef:NodeDef {name: nodeType})
CALL custom.util.getNodeDefTypesAndProps(nodeDef) YIELD type, prop
CALL custom.designer.view.getWidgetForProperty(type.name, prop) YIELD widgetType, initValues

RETURN 'Edit property: ' + prop.name + ' (' + type.name + ')' AS name,
       'Auto edit (' + metagraph.name + ')' AS group,
       'dots-circle-horizontal' AS icon,
       [{name: 'value', widget: widgetType, initValues: initValues}] AS params,
       [prop.uuid] AS implicitParams,
       false AS hidden;


/*
@name designer.action.auto.node.editNodeProperty_do

@mode write

@input contextUuid, STRING
@input viewUuid, STRING
@input params, MAP
@input implicitParams, LIST OF STRING

@output strategy, STRING
@output message, STRING
@output statusCode, INTEGER
@output result, MAP
*/

WITH $contextUuid AS contextUuid,
     $params['value'] AS propertyValue,
     $implicitParams[0] AS propUuid

MATCH (contextNode {uuid: contextUuid})
MATCH (property:Property {uuid: propUuid})

CALL custom.designer.view.convertPropertyValue(property.type, propertyValue) YIELD propertyValueConverted
CALL apoc.create.setProperty(contextNode, property.name, propertyValueConverted) YIELD node

RETURN {node: contextNode} AS result,
       0 AS statusCode,
       '' AS message,
       'APPEND' AS strategy;
