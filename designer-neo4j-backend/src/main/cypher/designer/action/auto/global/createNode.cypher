/*
@name designer.action.auto.global.createNode

@mode read
@input view, NODE

@output name, STRING
@output group, STRING
@output icon, STRING
@output params, LIST OF MAP
@output implicitParams, LIST OF STRING
@output hidden, BOOLEAN
*/

WITH $view AS view

MATCH (view)-[:HAS_FUNCTIONALITY]->(:Functionality)-[:AUTOGENERATED_FROM]->(metagraph:Metagraph)-[:DEFINES]->(nodeDef:NodeDef)
CALL {
        WITH nodeDef
        CALL custom.util.getNodeDefTypesAndProps(nodeDef) YIELD type, prop
        CALL custom.designer.view.getWidgetForProperty(type.name, prop) YIELD widgetType, initValues
        RETURN collect({name: prop.name, widget: widgetType, initValues: initValues}) AS params
}

RETURN 'Create: ' + nodeDef.name AS name,
       'Auto Create (' + metagraph.name + ')' AS group,
       'plus-circle' AS icon,
        params,
        [nodeDef.uuid] AS implicitParams,
        false AS hidden;

/*
@name designer.action.auto.global.createNode_do

@mode write

@input contextUuid, STRING
@input viewUuid, STRING
@input params, MAP
@input implicitParams, LIST OF STRING

@output strategy, STRING
@output message, STRING
@output statusCode, INTEGER
@output result, MAP
*/

WITH head($implicitParams) AS nodeDefUuid

MATCH (nodeDef:NodeDef {uuid: nodeDefUuid})

CALL {
        WITH nodeDef
        CALL custom.util.getNodeDefTypesAndProps(nodeDef) YIELD type, prop
        WITH prop, $params[prop.name] AS propertyValue
        CALL custom.designer.view.convertPropertyValue(prop.type, propertyValue) YIELD propertyValueConverted
        WITH collect([prop.name, propertyValueConverted]) + [["uuid", randomUUID()]] AS keyVals
        RETURN apoc.map.fromPairs(keyVals) AS props
}
CALL apoc.create.node([nodeDef.name, "_Identifiable"], props) YIELD node
CALL custom.designer.action.auto.connectNodeToAnyOrIdentifiable(node) YIELD modifiedPaths

RETURN {node: node} AS result,
       0 AS statusCode,
       '' AS message,
       'APPEND' AS strategy;