/*
@name designer.action.auto.global.searchNode

@mode read
@input view, NODE

@output name, STRING
@output group, STRING
@output icon, STRING
@output params, LIST OF MAP
@output implicitParams, LIST OF STRING
@output hidden, BOOLEAN
*/

WITH $view AS view
MATCH (view)-[:HAS_FUNCTIONALITY]->(func:Functionality)-[:AUTOGENERATED_FROM]->(metagraph:Metagraph)

CALL {
  WITH metagraph
  MATCH (metagraph)-[:DEFINES]->(nodeDef:NodeDef)-[:HAS_TYPE]->(:Type)-[:HAS_PROPERTY]->(property:Property)
  WHERE property.name IN ["name", "caption", "title"]
  RETURN  nodeDef, property

  UNION

  WITH metagraph
  MATCH (metagraph)-[:DEFINES]->(nodeDef:NodeDef)-[:SUBCLASS_OF*1..]->(abstractNodeDef:AbstractNodeDef)-[:HAS_TYPE]->(:Type)-[:HAS_PROPERTY]->(property:Property)
  WHERE property.name IN ["name", "caption", "title"]
  RETURN  nodeDef, property
}

CALL apoc.cypher.doIt (
  "MATCH (node:"+nodeDef.name+") RETURN DISTINCT node."+property.name+" AS possibilities", {}
) YIELD value

RETURN 'Search ' + nodeDef.name + ' by ' + property.name AS name,
       'Auto Search (' + metagraph.name + ')' AS group,
       'search' AS icon,
        [{name: property.name, widget: "dropDown", initValues: collect(value.possibilities)}] AS params,
        [nodeDef.name, property.name] AS implicitParams,
        false AS hidden;

/*
@name designer.action.auto.global.searchNode_do

@mode read

@input contextUuid, STRING
@input viewUuid, STRING
@input params, MAP
@input implicitParams, LIST OF STRING

@output strategy, STRING
@output message, STRING
@output statusCode, INTEGER
@output result, MAP
*/

WITH $params AS params,
     $implicitParams AS implicitParams

WITH implicitParams[0] AS nodeType,
     implicitParams[1] AS propertyToSearchBy,
     params[implicitParams[1]] AS propertyValue

CALL apoc.cypher.run("MATCH (node:" + nodeType + " {" + propertyToSearchBy + ": $propertyValue}) RETURN node", {propertyValue: propertyValue}) YIELD value

RETURN {node: value.node} AS result,
       0 AS statusCode,
       '' AS message,
       'APPEND' AS strategy;