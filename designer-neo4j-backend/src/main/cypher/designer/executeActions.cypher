/*
@name designer.executeActions

@mode write
@input params, STRING

@output result, STRING
*/

WITH apoc.convert.fromJsonMap($params).params AS actionExecutionMaps

CALL apoc.log.info('[designer.executeActions] Executing actions with parameters: %s', [$params])

UNWIND actionExecutionMaps AS actionExecutionMap

WITH actionExecutionMap,
     actionExecutionMap.uuid AS executionId,
     actionExecutionMap.viewId AS viewId,
     split(actionExecutionMap.actionUuid, '$') AS actionIds,
     apoc.map.fromPairs([argument IN actionExecutionMap.arguments | [argument.name, argument.value]] + [['contextUuid', actionExecutionMap.contextUuid], ['viewId', actionExecutionMap.viewId]]) AS actionParameters

MATCH (:View {uuid: viewId})

CALL {
      // computation model actions

      WITH actionIds, actionParameters
      MATCH (action:Action {uuid: head(actionIds)})
      CALL custom.designer.action.executeAction(action, actionParameters) YIELD strategy, statusCode, message, result
      RETURN {strategy: strategy, statusCode: statusCode, message: message, result: result} AS value

      UNION

      // autogenerated actions
      WITH actionIds, actionParameters, actionExecutionMap
      WITH head(actionIds) AS procedureName,
           tail(actionIds) AS implicitParams,
           actionExecutionMap.contextUuid AS contextUuid,
           actionExecutionMap.viewId AS viewUuid,
           actionParameters

      CALL custom.designer.action.auto.executeAutoAction(procedureName, contextUuid, viewUuid, actionParameters, implicitParams) YIELD strategy, statusCode, message, result
      RETURN {strategy: strategy, statusCode: statusCode, message: message, result: result} AS value

      UNION

      WITH actionIds, executionId
      RETURN {message: apoc.text.format("Action %s in execution %s returned no results.", [head(actionIds), executionId])} AS value
}

WITH viewId,
     executionId,
     {uuid: actionExecutionMap.contextUuid, type: actionExecutionMap.contextType} AS context,
     collect(value) AS result

CALL custom.designer.action.serialize.serializeResult(viewId, executionId, context, result) YIELD result AS serializedResult
WITH collect(serializedResult) AS results
WITH apoc.convert.toJson(results) AS result

RETURN result;
