/*
@name designer.traverse.traverseFunctionality

@mode read
@input functionality, NODE

@output nodes, LIST OF NODE
@output relationships, LIST OF RELATIONSHIP
@output dependantNodes, LIST OF NODE

*/

WITH $functionality AS functionality

CALL apoc.log.debug("[designer.traverse.traverseFunctionality] Traverse Functionality with uuid %s and name %s", [functionality.uuid, functionality.name])

CALL apoc.path.subgraphAll(functionality,
{
  relationshipFilter: 'AUTOGENERATED_FROM>|HAS_ACTION>|DEFAULT_NODE_ACTION>|DEFAULT_REL_ACTION>|ON_INIT>|WITH_PARAMETER>|RENDERED_WITH>|PROVIDES_VALUE>|PROVIDES_CONTEXT>|EXECUTES>|FOR_NODE>|FOR_REL>',
  labelFilter:        '+Metagraph|+Action|+ActionParameter|+Widget|+Input|+Job|+NodeDef|+RelDef'
}) YIELD nodes, relationships

WITH functionality,
     nodes AS nodes,
     [rel IN relationships WHERE NOT rel:DEPENDS_ON] AS relationships,
     ['Metagraph', 'Job', 'Input', 'NodeDef', 'RelDef'] AS dependantLabels


WITH [node IN nodes WHERE all(label IN labels(node) WHERE NOT label IN dependantLabels) | node] AS nodes,
     [node IN nodes WHERE any(label IN labels(node) WHERE label IN dependantLabels) | node] AS dependantNodes,
     relationships

RETURN  nodes,
        relationships,
        dependantNodes


