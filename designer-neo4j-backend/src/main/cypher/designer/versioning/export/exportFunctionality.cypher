/*
@name designer.export.exportFunctionality

@input functionality, NODE

@return STRING
*/

WITH $functionality AS functionality

CALL apoc.log.debug("[designer.export.exportFunctionality] Exporting Functionality with uuid %s and name %s", [functionality.uuid, functionality.name])

CALL apoc.path.subgraphAll(functionality,
{
  relationshipFilter: 'AUTOGENERATED_FROM>|HAS_ACTION>|DEFAULT_NODE_ACTION>|DEFAULT_REL_ACTION>|ON_INIT>|WITH_PARAMETER>|RENDERED_WITH>|PROVIDES_VALUE>|PROVIDES_CONTEXT>|EXECUTES>|FOR_NODE>|FOR_REL>',
  labelFilter:        '+Metagraph|+Action|+ActionParameter|+Widget|+Input|+Job|+NodeDef|+RelDef|+Function'
}) YIELD nodes, relationships

WITH functionality,
     nodes,
     [rel IN relationships WHERE NOT rel:DEPENDS_ON] AS relationships,
     ['Metagraph', 'Job', 'Input', 'NodeDef', 'RelDef', 'Output', 'Function'] AS dependantLabels

WITH custom.util.toSnakeCase(functionality.name) AS functionalityName,
     [node IN nodes WHERE all(label IN labels(node) WHERE NOT label IN dependantLabels) | node] AS nodes,
     [node IN nodes WHERE any(label IN labels(node) WHERE label IN dependantLabels) | node] AS dependantNodes,
     relationships

CALL {
    WITH functionalityName, dependantNodes
    WITH functionalityName,
         [node IN dependantNodes WHERE node:Metagraph| node] AS dependantMetagraphs

    UNWIND range(1, size(dependantMetagraphs)) AS index
    WITH functionalityName, index, dependantMetagraphs[index - 1] AS metagraph

    WITH custom.designer.export.exportMetagraph(metagraph) AS cypher
    RETURN count(*) AS _

    UNION

    WITH functionalityName, dependantNodes
    WITH functionalityName,
         [node IN dependantNodes WHERE node:Job| node] AS dependantJobs

    UNWIND range(1, size(dependantJobs)) AS index
    WITH functionalityName, index, dependantJobs[index - 1] AS job

    WITH custom.designer.export.exportJob(job) AS cypher
    RETURN count(*) AS _

    UNION

    WITH functionalityName, dependantNodes
    WITH functionalityName,
         [node IN dependantNodes WHERE node:Function| node] AS dependantFunctions

    UNWIND range(1, size(dependantFunctions)) AS index
    WITH functionalityName, index, dependantFunctions[index - 1] AS function

    WITH custom.designer.export.exportFunction(function) AS cypher
    RETURN count(*) AS _
}

WITH functionalityName,
     dependantNodes,
     nodes,
     relationships,
     count(*) AS _
RETURN tnt.export.toCypher("/import/functionality_" + functionalityName + ".cypher", dependantNodes, nodes, relationships);


